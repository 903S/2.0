#!/usr/bin/env python3
"""
A script to VISUALIZE the partition result generated by PyMetis
for the IEEE-14 bus system, using different colors for partitions and lines.
"""

import torch
import numpy as np
import sys
from pathlib import Path

# Add project root path
sys.path.append(str(Path(__file__).parent.parent))

# Import necessary components
from src.data_processing import PowerGridDataProcessor
from src.gat import create_hetero_graph_encoder
from src.rl.utils import MetisInitializer
from src.rl.environment import PowerGridPartitioningEnv
from src.visualization import visualize_partition # <-- The key import for visualization

def create_ieee14_case():
    """Creates the IEEE-14 bus test case dictionary."""
    # This is the standard IEEE-14 bus system data
    mpc = {
        'baseMVA': 100.0,
        'bus': np.array([
            [1, 3, 0.0, 0.0, 0.0, 0.0, 1, 1.06, 0.0, 138, 1, 1.1, 0.9],
            [2, 2, 21.7, 12.7, 0.0, 0.0, 1, 1.045, -4.98, 138, 1, 1.1, 0.9],
            [3, 2, 94.2, 19.0, 0.0, 0.0, 1, 1.01, -12.72, 138, 1, 1.1, 0.9],
            [4, 1, 47.8, -3.9, 0.0, 0.0, 1, 1.019, -10.33, 138, 1, 1.1, 0.9],
            [5, 1, 7.6, 1.6, 0.0, 0.0, 1, 1.02, -8.78, 138, 1, 1.1, 0.9],
            [6, 2, 11.2, 7.5, 0.0, 0.0, 1, 1.07, -14.22, 138, 1, 1.1, 0.9],
            [7, 1, 0.0, 0.0, 0.0, 0.0, 1, 1.062, -13.37, 138, 1, 1.1, 0.9],
            [8, 2, 0.0, 0.0, 0.0, 0.0, 1, 1.09, -13.36, 138, 1, 1.1, 0.9],
            [9, 1, 29.5, 16.6, 0.0, 19.0, 1, 1.056, -14.94, 138, 1, 1.1, 0.9],
            [10, 1, 9.0, 5.8, 0.0, 0.0, 1, 1.051, -15.1, 138, 1, 1.1, 0.9],
            [11, 1, 3.5, 1.8, 0.0, 0.0, 1, 1.057, -14.79, 138, 1, 1.1, 0.9],
            [12, 1, 6.1, 1.6, 0.0, 0.0, 1, 1.055, -15.07, 138, 1, 1.1, 0.9],
            [13, 1, 13.5, 5.8, 0.0, 0.0, 1, 1.05, -15.16, 138, 1, 1.1, 0.9],
            [14, 1, 14.9, 5.0, 0.0, 0.0, 1, 1.036, -16.04, 138, 1, 1.1, 0.9],
        ]),
        'gen': np.array([
            [1, 232.4, -16.9, 10, -10, 1.06, 100, 1, 332.4, 0],
            [2, 40.0, 43.56, 50, -40, 1.045, 100, 1, 140.0, 0],
            [3, 0.0, 25.075, 40, 0, 1.01, 100, 1, 100.0, 0],
            [6, 0.0, 12.73, 24, -6, 1.07, 100, 1, 100.0, 0],
            [8, 0.0, 17.623, 24, -6, 1.09, 100, 1, 100.0, 0],
        ]),
        'branch': np.array([
            [1, 2, 0.01938, 0.05917, 0.0528, 100, 0, 0, 0, 0, 1, -360, 360],
            [1, 5, 0.05403, 0.22304, 0.0492, 100, 0, 0, 0, 0, 1, -360, 360],
            [2, 3, 0.04699, 0.19797, 0.0438, 100, 0, 0, 0, 0, 1, -360, 360],
            [2, 4, 0.05811, 0.17632, 0.034, 100, 0, 0, 0, 0, 1, -360, 360],
            [2, 5, 0.05695, 0.17388, 0.0346, 100, 0, 0, 0, 0, 1, -360, 360],
            [3, 4, 0.06701, 0.17103, 0.0128, 100, 0, 0, 0, 0, 1, -360, 360],
            [4, 5, 0.01335, 0.04211, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [4, 7, 0.0, 0.20912, 0.0, 100, 0, 0, 0.978, 0, 1, -360, 360],
            [4, 9, 0.0, 0.55618, 0.0, 100, 0, 0, 0.969, 0, 1, -360, 360],
            [5, 6, 0.0, 0.25202, 0.0, 100, 0, 0, 0.932, 0, 1, -360, 360],
            [6, 11, 0.09498, 0.1989, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [6, 12, 0.12291, 0.25581, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [6, 13, 0.06615, 0.13027, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [7, 8, 0.0, 0.17615, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [7, 9, 0.0, 0.11001, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [9, 10, 0.03181, 0.0845, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [9, 14, 0.12711, 0.27038, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [10, 11, 0.08205, 0.19207, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [12, 13, 0.22092, 0.19988, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
            [13, 14, 0.17093, 0.34802, 0.0, 100, 0, 0, 0, 0, 1, -360, 360],
        ])
    }
    return mpc

def main():
    """Main function to run the partition visualization."""
    print("--- Visualizing PyMetis Partition with Colors ---")
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    num_partitions = 3

    # Step 1: Load and process data
    print("Loading data...")
    mpc_data = create_ieee14_case()
    processor = PowerGridDataProcessor(normalize=True, cache_dir='cache')
    hetero_data = processor.graph_from_mpc(mpc_data).to(device)

    # Step 2: Create GAT encoder and embeddings (needed to initialize the env)
    print("Generating node embeddings...")
    encoder = create_hetero_graph_encoder(hetero_data, hidden_channels=32, gnn_layers=2, output_dim=64).to(device)
    with torch.no_grad():
        node_embeddings = encoder.encode_nodes(hetero_data)

    # Step 3: Get the partition labels from PyMetis
    print("Running PyMetis to get partition...")
    initializer = MetisInitializer(hetero_data, device)
    pymetis_labels = initializer.initialize_partition(num_partitions)
    
    # Step 4: Create a temporary environment to hold the state for visualization
    # We pass attention_weights=None to focus on the partition itself
    print("Creating environment instance for visualization...")
    # NOTE: The PowerGridPartitioningEnv needs to be defined or imported correctly.
    # Assuming it's in rl.environment as per the project structure.
    env = PowerGridPartitioningEnv(
        hetero_data=hetero_data,
        node_embeddings=node_embeddings,
        num_partitions=num_partitions,
        max_steps=1, # Not important for this script
        device=device,
        attention_weights=None 
    )

    # Step 5: Manually set the environment's state to reflect the PyMetis partition
    # The StateManager's reset method is perfect for this.
    env.state_manager.reset(pymetis_labels)

    # Step 6: Call the visualization function from visualization.py
    print("\nGenerating visualization...")
    visualize_partition(
        env,
        title=f"PyMetis Partition Result (k={num_partitions})",
        save_path="pymetis_partition_visualization.png"
    )
    print("\nVisualization saved to 'pymetis_partition_visualization.png'")
    
    # Step 7: Also print the text result for reference
    print("\n--- Textual Partition Result ---")
    partition_labels_list = pymetis_labels.cpu().numpy()
    partitions = {i: [] for i in range(1, num_partitions + 1)}
    for node_idx, partition_id in enumerate(partition_labels_list):
        partitions[partition_id].append(node_idx + 1)
    
    for p_id, nodes in sorted(partitions.items()):
        nodes.sort()
        print(f"Partition {p_id} (Nodes: {len(nodes)}): {nodes}")

if __name__ == '__main__':
    main()
    